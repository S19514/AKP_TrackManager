// <auto-generated />
using System;
using AKP_TrackManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AKP_TrackManager.Migrations
{
    [DbContext(typeof(AKP_TrackManager_devContext))]
    [Migration("20221031120033_AKP_TrackManager_Initial")]
    partial class AKP_TrackManager_Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AKP_TrackManager.Models.Accident", b =>
                {
                    b.Property<int>("AccidentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccidentDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("AnyoneInjured")
                        .HasColumnType("bit");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("AccidentId");

                    b.ToTable("Accident", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int");

                    b.Property<decimal>("EngingeCapacity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CarId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.CarAccidentByMember", b =>
                {
                    b.Property<int>("CarAccidentMemberId")
                        .HasColumnType("int");

                    b.Property<int>("AccidentAccidentId")
                        .HasColumnType("int")
                        .HasColumnName("Accident_AccidentId");

                    b.Property<int>("CarCarId")
                        .HasColumnType("int")
                        .HasColumnName("Car_CarId");

                    b.Property<int>("MemberMemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_MemberId");

                    b.HasKey("CarAccidentMemberId")
                        .HasName("CarAccidentByMember_pk");

                    b.HasIndex("AccidentAccidentId");

                    b.HasIndex("CarCarId");

                    b.HasIndex("MemberMemberId");

                    b.ToTable("CarAccidentByMember", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.CarMember", b =>
                {
                    b.Property<int>("CarMemberId")
                        .HasColumnType("int");

                    b.Property<int>("CarCarId")
                        .HasColumnType("int")
                        .HasColumnName("Car_CarId");

                    b.Property<int>("MemberMemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_MemberId");

                    b.HasKey("CarMemberId");

                    b.HasIndex("CarCarId");

                    b.HasIndex("MemberMemberId");

                    b.ToTable("CarMember", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.ClubMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("JoinDate")
                        .HasColumnType("int");

                    b.Property<int>("MemberMemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_MemberId");

                    b.HasKey("MembershipId")
                        .HasName("ClubMembership_pk");

                    b.HasIndex("MemberMemberId");

                    b.ToTable("ClubMembership", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Lap", b =>
                {
                    b.Property<int>("LapId")
                        .HasColumnType("int");

                    b.Property<int>("AbsoluteTime")
                        .HasColumnType("int");

                    b.Property<int>("MeasuredTime")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyTime")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("Training_TrainingId");

                    b.HasKey("LapId");

                    b.HasIndex("TrainingTrainingId");

                    b.ToTable("Lap", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("LocationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAscendant")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Surname")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.MemberCarOnLap", b =>
                {
                    b.Property<int>("MemberLapId")
                        .HasColumnType("int");

                    b.Property<int>("CarCarId")
                        .HasColumnType("int")
                        .HasColumnName("Car_CarId");

                    b.Property<int>("LapLapId")
                        .HasColumnType("int")
                        .HasColumnName("Lap_LapId");

                    b.Property<int>("MemberMemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_MemberId");

                    b.HasKey("MemberLapId")
                        .HasName("MemberCarOnLap_pk");

                    b.HasIndex("CarCarId");

                    b.HasIndex("LapLapId");

                    b.HasIndex("MemberMemberId");

                    b.ToTable("MemberCarOnLap", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ClubMembershipMembershipId")
                        .HasColumnType("int")
                        .HasColumnName("ClubMembership_MembershipId");

                    b.Property<int>("MemberMemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_MemberId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.HasIndex("ClubMembershipMembershipId");

                    b.HasIndex("MemberMemberId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.TrackConfiguration", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<bool>("Reversable")
                        .HasColumnType("bit");

                    b.HasKey("TrackId")
                        .HasName("TrackConfiguration_pk");

                    b.ToTable("TrackConfiguration", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.training", b =>
                {
                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("LocationLocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location_LocationId");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("TrackConfigurationTrackId")
                        .HasColumnType("int")
                        .HasColumnName("TrackConfiguration_TrackId");

                    b.HasKey("TrainingId");

                    b.HasIndex("LocationLocationId");

                    b.HasIndex("TrackConfigurationTrackId");

                    b.ToTable("Training", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.TrainingAttandance", b =>
                {
                    b.Property<int>("TrainingAttandanceId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberMemberId")
                        .HasColumnType("int")
                        .HasColumnName("Member_MemberId");

                    b.Property<int>("TrainingTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("Training_TrainingId");

                    b.HasKey("TrainingAttandanceId");

                    b.HasIndex("MemberMemberId");

                    b.HasIndex("TrainingTrainingId");

                    b.ToTable("TrainingAttandance", (string)null);
                });

            modelBuilder.Entity("AKP_TrackManager.Models.CarAccidentByMember", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.Accident", "AccidentAccident")
                        .WithMany("CarAccidentByMembers")
                        .HasForeignKey("AccidentAccidentId")
                        .IsRequired()
                        .HasConstraintName("CarAccidentByMember_Accident");

                    b.HasOne("AKP_TrackManager.Models.Car", "CarCar")
                        .WithMany("CarAccidentByMembers")
                        .HasForeignKey("CarCarId")
                        .IsRequired()
                        .HasConstraintName("CarAccidentByMember_Car");

                    b.HasOne("AKP_TrackManager.Models.Member", "MemberMember")
                        .WithMany("CarAccidentByMembers")
                        .HasForeignKey("MemberMemberId")
                        .IsRequired()
                        .HasConstraintName("CarAccidentByMember_Member");

                    b.Navigation("AccidentAccident");

                    b.Navigation("CarCar");

                    b.Navigation("MemberMember");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.CarMember", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.Car", "CarCar")
                        .WithMany("CarMembers")
                        .HasForeignKey("CarCarId")
                        .IsRequired()
                        .HasConstraintName("CarDriver_Car");

                    b.HasOne("AKP_TrackManager.Models.Member", "MemberMember")
                        .WithMany("CarMembers")
                        .HasForeignKey("MemberMemberId")
                        .IsRequired()
                        .HasConstraintName("CarDriver_Member");

                    b.Navigation("CarCar");

                    b.Navigation("MemberMember");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.ClubMembership", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.Member", "MemberMember")
                        .WithMany("ClubMemberships")
                        .HasForeignKey("MemberMemberId")
                        .IsRequired()
                        .HasConstraintName("ClubMembership_Member");

                    b.Navigation("MemberMember");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Lap", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.training", "TrainingTraining")
                        .WithMany("Laps")
                        .HasForeignKey("TrainingTrainingId")
                        .IsRequired()
                        .HasConstraintName("Lap_Training");

                    b.Navigation("TrainingTraining");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.MemberCarOnLap", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.Car", "CarCar")
                        .WithMany("MemberCarOnLaps")
                        .HasForeignKey("CarCarId")
                        .IsRequired()
                        .HasConstraintName("MemberOnLap_Car");

                    b.HasOne("AKP_TrackManager.Models.Lap", "LapLap")
                        .WithMany("MemberCarOnLaps")
                        .HasForeignKey("LapLapId")
                        .IsRequired()
                        .HasConstraintName("MemberCarOnLap_Lap");

                    b.HasOne("AKP_TrackManager.Models.Member", "MemberMember")
                        .WithMany("MemberCarOnLaps")
                        .HasForeignKey("MemberMemberId")
                        .IsRequired()
                        .HasConstraintName("MemberOnLap_Member");

                    b.Navigation("CarCar");

                    b.Navigation("LapLap");

                    b.Navigation("MemberMember");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Payment", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.ClubMembership", "ClubMembershipMembership")
                        .WithMany("Payments")
                        .HasForeignKey("ClubMembershipMembershipId")
                        .IsRequired()
                        .HasConstraintName("Payment_ClubMembership");

                    b.HasOne("AKP_TrackManager.Models.Member", "MemberMember")
                        .WithMany("Payments")
                        .HasForeignKey("MemberMemberId")
                        .IsRequired()
                        .HasConstraintName("Payment_Member");

                    b.Navigation("ClubMembershipMembership");

                    b.Navigation("MemberMember");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.training", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.Location", "LocationLocation")
                        .WithMany("training")
                        .HasForeignKey("LocationLocationId")
                        .IsRequired()
                        .HasConstraintName("Training_Location");

                    b.HasOne("AKP_TrackManager.Models.TrackConfiguration", "TrackConfigurationTrack")
                        .WithMany("training")
                        .HasForeignKey("TrackConfigurationTrackId")
                        .IsRequired()
                        .HasConstraintName("Training_TrackConfiguration");

                    b.Navigation("LocationLocation");

                    b.Navigation("TrackConfigurationTrack");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.TrainingAttandance", b =>
                {
                    b.HasOne("AKP_TrackManager.Models.Member", "MemberMember")
                        .WithMany("TrainingAttandances")
                        .HasForeignKey("MemberMemberId")
                        .HasConstraintName("TrainingAttandance_Member");

                    b.HasOne("AKP_TrackManager.Models.training", "TrainingTraining")
                        .WithMany("TrainingAttandances")
                        .HasForeignKey("TrainingTrainingId")
                        .IsRequired()
                        .HasConstraintName("TrainingAttandance_Training");

                    b.Navigation("MemberMember");

                    b.Navigation("TrainingTraining");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Accident", b =>
                {
                    b.Navigation("CarAccidentByMembers");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Car", b =>
                {
                    b.Navigation("CarAccidentByMembers");

                    b.Navigation("CarMembers");

                    b.Navigation("MemberCarOnLaps");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.ClubMembership", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Lap", b =>
                {
                    b.Navigation("MemberCarOnLaps");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Location", b =>
                {
                    b.Navigation("training");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.Member", b =>
                {
                    b.Navigation("CarAccidentByMembers");

                    b.Navigation("CarMembers");

                    b.Navigation("ClubMemberships");

                    b.Navigation("MemberCarOnLaps");

                    b.Navigation("Payments");

                    b.Navigation("TrainingAttandances");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.TrackConfiguration", b =>
                {
                    b.Navigation("training");
                });

            modelBuilder.Entity("AKP_TrackManager.Models.training", b =>
                {
                    b.Navigation("Laps");

                    b.Navigation("TrainingAttandances");
                });
#pragma warning restore 612, 618
        }
    }
}
